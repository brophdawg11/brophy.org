(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{242:function(e){e.exports=JSON.parse('{"contents":[{"title":"A Look Inside Vue\'s Change Detection","author":"Matt Brophy","postDate":"2017-11-15 17:30","tags":"vue,javascript,spa","excerpt":"A layman&apos;s interpretation of <a href=\\"https://en.wikipedia.org/wiki/Occam%27s_razor\\" title=\\"Occam&apos;s Razor\\">Occam&apos;s Razor</a> can be boiled down to <em>&quot;the simplest explanation is usually the correct one.&quot;</em>  This was exactly what came to mind the moment I learned how <a href=\\"https://vuejs.org/\\" title=\\"Vue.js\\">Vue.js</a> implements it&apos;s change detection under the hood.  It&apos;s simple, elegant, and beautiful.","permalink":"/post/a-look-inside-vues-change-detection","readingTime":{"text":"10 min read","minutes":9.62,"time":577199.9999999999,"words":1924},"slug":"a-look-inside-vues-change-detection"},{"title":"Beware of hidden inputs in Angular filters","author":"Matt Brophy","postDate":"2017-01-14 12:00","tags":"angularjs,javascript,functional","excerpt":"If you&apos;ve been writing JavaScript (or really any language for that matter) in the past few years, chances are you&apos;ve caught wind of the rising popularity of functional programming paradigms.  <em>Pure functions</em> are one of the major concepts of functional programming, and as it turns out, the usage of impure functions in Angular filters can produce some not-so-obvious bugs in your AngularJS application.","permalink":"/post/beware-hidden-inputs-in-angular-filters","readingTime":{"text":"5 min read","minutes":4.725,"time":283500,"words":945},"slug":"beware-hidden-inputs-in-angular-filters"},{"title":"Building a Blog with Metalsmith","author":"Matt Brophy","postDate":"2017-02-15 19:00","tags":"ssg,javascript,metalsmith,blog","excerpt":"Ever want to set up your own blog?  Stuck on which Static Site Generator to use?  Know Javascript?  Or don&apos;t?  After trying out multiple NodeJS based SSG&apos;s, and looking into multiple non-NodeJS based ones, I settled on Metalsmith for my own blog.  Here&apos;s my beginner&apos;s guide to setting up a new blog from scratch.","permalink":"/post/building-a-blog-with-metalsmith","readingTime":{"text":"8 min read","minutes":7.5,"time":450000,"words":1500},"slug":"building-a-blog-with-metalsmith"},{"title":"My Journey to Metalsmith","author":"Matt Brophy","postDate":"2016-12-27 12:00","tags":"ssg,javascript,metalsmith","excerpt":"Every developer has a never-ending <em>TODO</em> list of side projects, experiments,\\nblog posts, etc.  We&apos;re going to get to these things, we <em>promise</em>!  Perpetually hanging towards the top of my list was <em>&quot;make <a href=\\"http://brophy.org\\" title=\\"brophy.org\\">brophy.org</a> more than just my resume.&quot;</em>  However, tackling that item proved to be a longer-than-anticipated journey through the world of Static Site Generators, finally landing me on <a href=\\"http://metalsmith.io\\" title=\\"Metalsmith\\">Metalsmith</a>.","permalink":"/post/my-journey-to-metalsmith","readingTime":{"text":"10 min read","minutes":9.34,"time":560400,"words":1868},"slug":"my-journey-to-metalsmith"},{"title":"Nested Reactive Forms in Angular2, Continued","author":"Matt Brophy","postDate":"2017-02-09 12:34","tags":"angular,javascript,functional,reactive,frp","excerpt":"If you haven&apos;t read <a href=\\"/post/nested-reactive-forms-in-angular2/\\" title=\\"Nested Reactive Forms in Angular2\\">Part 1</a> of this post, I suggest you jump over and check that out first, or else you may find yourself lost in the advanced operations we&apos;ll be discussing here.  In this post, we&apos;re going to look at more advanced usages of this setup, including form submission, adding/removing children, autosaving, undo/redo, and resetting form state.","permalink":"/post/nested-reactive-forms-in-angular2-continued","readingTime":{"text":"9 min read","minutes":8.415,"time":504900,"words":1683},"slug":"nested-reactive-forms-in-angular2-continued"},{"title":"Nested Reactive Forms in Angular2","author":"Matt Brophy","postDate":"2017-02-08 22:00","tags":"angular,javascript,functional,reactive,frp","excerpt":"Over at <a href=\\"http://www.urbn.com\\" title=\\"URBN\\">URBN</a>, I recently worked on a little internal app that involved a fairly complex nested form UI.  Having only done limited Angular2 work thus far, mostly using <a href=\\"https://angular.io/docs/ts/latest/guide/upgrade.html\\" title=\\"NgUpgrade\\">NgUpgrade</a> against an existing Angular1 app, it was a great learning experience in some of the new form capabilities offered in Angular2.  However, I couldn&apos;t find many great examples involving nested forms that felt clean/maintainable/etc.  After a few days of hacking, I was pretty happy with what we ended up with, and super excited about the new <a href=\\"https://angular.io/docs/ts/latest/guide/reactive-forms.html\\" title=\\"Reactive Forms\\">Reactive Forms</a> in Angular2.  ","permalink":"/post/nested-reactive-forms-in-angular2","readingTime":{"text":"12 min read","minutes":11.03,"time":661800,"words":2206},"slug":"nested-reactive-forms-in-angular2"},{"title":"The Power of Reduce","author":"Matt Brophy","postDate":"2019-01-28 21:30","tags":"javascript","excerpt":"The <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\\">Array.prototype.reduce</a> method is one of those methods that is unnecessarily frightening at first glance.  It&apos;s something that I myself was uncomfortable with for much longer than needed early on in my career.  If you find yourself in that position, I hope this article helps change that.","permalink":"/post/the-power-of-reduce","readingTime":{"text":"9 min read","minutes":8.33,"time":499800,"words":1666},"slug":"the-power-of-reduce"}]}')}}]);