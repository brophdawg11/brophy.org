(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{237:function(e,t){e.exports={title:"Building a Blog with Metalsmith",author:"Matt Brophy",postDate:"2017-02-15 19:00",tags:"ssg,javascript,metalsmith,blog",__content:'<p>Ever want to set up your own blog?  Stuck on which Static Site Generator to use?  Know Javascript?  Or don&#39;t?  After trying out multiple NodeJS based SSG&#39;s, and looking into multiple non-NodeJS based ones, I settled on Metalsmith for my own blog.  Here&#39;s my beginner&#39;s guide to setting up a new blog from scratch.</p>\n<h2 id="prerequisites">Prerequisites</h2>\n<ul>\n<li>You have <a href="https://nodejs.org/" title="Node.js">NodeJS</a> installed.  And are hopefully at least a <em>little</em> familiar with it.</li>\n</ul>\n<h2 id="setup">Setup</h2>\n<p>Start with a brand new empty directory, set it up for a Node project, and install <a href="http://metalsmith.io" title="Metalsmith">Metalsmith</a>:</p>\n<pre><code class="hljs bash">&gt; mkdir blog\n&gt; <span class="hljs-built_in">cd</span> blog\n&gt; npm init\n<span class="hljs-comment"># Answer questions</span>\n&gt; npm install --save metalsmith</code></pre>\n<p>Create your bare-bones Metalsmith build file, <code>build.js</code>:</p>\n<pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Metalsmith  = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'metalsmith\'</span>);\n\nMetalsmith(__dirname)\n    .source(<span class="hljs-string">\'./contents\'</span>)       <span class="hljs-comment">// read files from here</span>\n    .destination(<span class="hljs-string">\'./output\'</span>)    <span class="hljs-comment">// write files to here</span>\n    .build(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {             <span class="hljs-comment">// build!</span>\n        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;     <span class="hljs-comment">// handle errors</span>\n    });</code></pre>\n<p>Yep, that&#39;s it.  That&#39;s a fully-functioning Metalsmith static site.  It&#39;s not going to do anything but copy your stuff from <code>contents/</code> into <code>output/</code>, but it works.  Give it a shot - make your first content file and run the build:</p>\n<pre><code class="hljs bash">&gt; mkdir contents\n&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span> &gt; contents/index.html\n&gt; node build.js\n&gt; cat output/index.html\n&lt;h1&gt;Hello World&lt;/h1&gt;</code></pre>\n<p>Look at that, there&#39;s our file, processed through the Metalsmith pipeline.</p>\n<p>The pipeline is an important concept to grasp when it comes to working with Metalsmith.  You tell it where to find your input files via <code>.source()</code> and where to write the output files via <code>.destination()</code>, and then you will begin inserting a bunch of plugins as ordered steps along the pipeline.  When all your plugins are registered, you call <code>.build()</code> to start the processing.  It will then process <em>all</em> files from your <code>source</code> directory through the plugin pipeline, transforming them at each step of the way, and finally write out the final files in your <code>destination</code> directory.</p>\n<p>Let&#39;s take a look at what the pipeline looks like by writing and adding our first plugin.  Add the following between the <code>destination</code> and <code>build</code> steps:</p>\n<pre><code class="hljs javascript">.use(<span class="hljs-function">(<span class="hljs-params">files, metalsmith, done</span>) =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'files\'</span>, files);\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'metalsmith\'</span>, metalsmith);\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'done\'</span>, done);\n    setImmediate(done);\n})</code></pre>\n<p>This is the format of a plugin and it&#39;s going to show us exactly what the pipeline looks like.  A plugin is called with <code>.use(Function)</code>, and in most plugins, you&#39;ll see that you call the plugin which returns the function you&#39;ll pass to <code>.use()</code>.  Each step of the pipeline receives three arguments - the <code>files</code> object, the <code>metalsmith</code> object, and a <code>done</code> callback.</p>\n<p><strong>The <code>files</code> object:</strong></p>\n<pre><code class="hljs json">{\n    \'index.html\': {\n        contents: &lt;Buffer&gt;,\n        mode: \'0644\',\n        stats: {\n            dev: 16777220,\n            mode: 33188,\n            ...\n        }\n    }\n}</code></pre>\n<p>The files object is just a key-value store with an entry for each file in your <code>source</code> directory.  It stores some useful information about the file in <code>mode</code> and <code>stats</code>, and it stores the entire content of the file as a <code>Buffer</code> in <code>contents</code>.  You can easily convert the<code>Buffer</code> to a string using <code>files[&#39;index.html&#39;].contents.toString()</code>.</p>\n<p><strong>The <code>metalsmith</code> object</strong></p>\n<p>...is not super important for now.  It&#39;s got lots of global metadata about the actual build you&#39;re running.  Maybe we&#39;ll come back to it, but in building out <a href="http://brophy.org" title="brophy.org">this blog</a>, I don&#39;t think I ever actually touched it.</p>\n<p><strong>The <code>done()</code> callback</strong></p>\n<p>This is to tell Metalsmith when you&#39;re done.  For whatever reason, all of their examples show it being called with <code>setImmediate</code> during synchronous plugins, so I followed suit.  Don&#39;t ask me why that matters.</p>\n<h2 id="lets-make-it-bloggy">Let&#39;s make it &quot;Bloggy&quot;</h2>\n<p>Ok, so using Metalsmith to copy/paste files around seems pretty stupid.  Let&#39;s start adding some of the <a href="http://www.metalsmith.io/#the-community-plugins" title="Metalsmith Plugins">Community Plugins</a> to make this thing useful.</p>\n<h3 id="markdown">Markdown</h3>\n<p>Let&#39;s stop writing HTML directly and use markdown.  First, install the plugin:</p>\n<pre><code class="hljs bash">&gt; npm install --save metalsmith-markdown</code></pre>\n<p>Then, add the plugin as a step in the pipeline, right before our final debugging plugin we set up above.  Please excuse the inline <code>require</code> - that&#39;s only for readability in this post.</p>\n<pre><code class="hljs javascript">.use(<span class="hljs-built_in">require</span>(<span class="hljs-string">\'metalsmith-markdown\'</span>)())</code></pre>\n<p>And then rename and alter your existing <code>index.html</code> file to an <code>index.md</code> file, and adjust it&#39;s contents to be markdown:</p>\n<pre><code class="hljs bash">&gt; mv contents/index.html contents/index.md\n&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">"# Hello World"</span> &gt; contents/index.md\n&gt; node build.js\n&gt; cat output/index.html\n&lt;h1&gt;Hello World&lt;/h1&gt;</code></pre>\n<p>Simple enough?  The <code>metalsmith-markdown</code> plugin essentially does the following with the <code>files</code> object:</p>\n<ol>\n<li>For each <code>*.md</code> key, indicating a markdown file in your <code>source</code> directory</li>\n<li>Convert the contents to HTML by running it through a markdown parser</li>\n<li>Write out the new <code>file</code> as <code>*.html</code></li>\n<li>Delete the old <code>*.md</code> key entry</li>\n</ol>\n<p>It might seem odd that it&#39;s deleting the old one, but that&#39;s again an important aspect of the metalsmith pipeline.  The <code>.build()</code> step at the very end essentially just writes the <code>files</code> object to disk.  For every key in <code>files</code>, a file matching that path is created in your <code>destination</code> directory, and the contents written to it.  If we didn&#39;t create the new <code>index.html</code> key in <code>files</code>, we wouldn&#39;t get an <code>output/index.html</code> file, and if we didn&#39;t delete the <code>index.md</code> key, we&#39;d also get an <code>output/index.md</code> file written out.</p>\n<h3 id="templating">Templating</h3>\n<p>Now that we&#39;re converting markdown to HTML, let&#39;s start wrapping our contents in a common header and footer using nunjucks templates.  First, install the <code>metalsmith-layouts</code> plugin and the <code>nunjucks</code> package, and create a directory to store our templates:</p>\n<pre><code class="hljs bash">&gt; npm install --save metalsmith-layouts nunjucks\n&gt; mkdir templates</code></pre>\n<p>Then add two templates we&#39;ll use for scaffolding the HTML page:</p>\n<pre><code class="hljs html">// templates/layout.nunjucks\n<span class="hljs-meta">&lt;!doctype html&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    {% block head %}\n    {% endblock %}\n<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>\n        {% block header %}\n            Welcome to My Blog!\n        {% endblock %}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        {% block content %}{% endblock %}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>\n        {% block footer %}\n            Built with <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://metalsmith.io/"</span>&gt;</span>Metalsmith<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n        {% endblock %}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>\n<pre><code class="hljs html">// temmplates/post.nunjucks\n{% extends "templates/layout.nunjucks" %}\n\n{% block content %}\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post"</span>&gt;</span>\n        {{ contents | safe }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n{% endblock %}</code></pre>\n<p>Basically, <code>layout.nunjucks</code> will be the base layout for every single page on out site, providing extendable blocks where content can be inserted.  Then <code>post.nunjucks</code> extends the layout tempate, and inserts the file contents inside the <code>body</code> block.</p>\n<p>Now, add a pipeline step that will process your files against these templates</p>\n<pre><code class="hljs javascript">.use(<span class="hljs-built_in">require</span>(<span class="hljs-string">\'metalsmith-layouts\'</span>)({\n    <span class="hljs-attr">engine</span>: <span class="hljs-string">\'nunjucks\'</span>,        <span class="hljs-comment">// Which engine to use</span>\n    directory: <span class="hljs-string">\'templates\'</span>,    <span class="hljs-comment">// Where are the templates stored</span>\n    <span class="hljs-keyword">default</span>: <span class="hljs-string">\'post.nunjucks\'</span>   <span class="hljs-comment">// Default template to use</span>\n}))</code></pre>\n<p>Now, when you run the pipeline, you should see a full-structured     index.html` file written out, using the proper above layout.</p>\n<h2 id="page-titles-and-specific-layouts">Page titles and specific layouts</h2>\n<p>Let&#39;s look at how we might both title a post as well as choose a specific layout to use.  Metalsmith supports <a href="https://middlemanapp.com/basics/frontmatter/" title="Frontmatter">YAML Frontmatter</a> by default (which can be turned off, but I don&#39;t see a good reason why), so you can specify metadata at the beginning of your source files.  So, insert the following at the beginning of <code>index.md</code>:</p>\n<pre><code class="hljs markdown">---\ntitle: My first Blog Post\n<span class="hljs-section">layout: post.nunjucks\n---</span>\n</code></pre>\n<p>Those entries will become key/value pairs on the file object in the pipeline, and also exposed to your templates.  So now we can enhance our <code>post.nunjucks</code> file to include the title:</p>\n<pre><code class="hljs html">{% extends "templates/layout.nunjucks" %}\n\n{% block header %}\n    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{ title }} <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n{% endblock %}\n\n{% block content %}\n    ...\n{% endblock %}</code></pre>\n<p>And the <code>metalsmith-layouts</code> plugin already looks for a <code>layout</code> property on every source file, and uses that prior to the default.</p>\n<h2 id="next-steps">Next Steps</h2>\n<p>So what&#39;s next?  We&#39;ve got markdown files with frontmatter metadata building into a nunjucks-driven extensible layout structure.  What do we need to move this into a full-on blog?  Here&#39;s the list of plugins I&#39;m using to host <a href="http://brophy.org" title="brophy.org">brophy.org</a>, and feel free to check out the source for this site over in <a href="https://www.github.com/brophdawg11/brophy.org" title="brophy.org on GitHub">GitHub</a> if you want to see any examples:</p>\n<ul>\n<li><code>metalsmith-collections</code> to organize all of your posts into sorted collections</li>\n<li><code>metalsmith-pagination</code> to group your collections into paginated lists</li>\n<li><code>metalsmith-metallic</code> for syntax highlighting in code blocks</li>\n<li><code>metalsmith-page-titles</code> to generate HTML <code>&lt;title&gt;</code> content</li>\n<li><code>metalsmith-assets</code> to copy over static assets</li>\n<li><code>metalsmith-favicons</code> to copy over and setup your site icons</li>\n<li><code>metalsmith-drafts</code> to support draft posts that don&#39;t get published</li>\n<li><code>metalsmith-permalinks</code> to generate permalinks without the <code>.html</code></li>\n<li><code>metalsmith-excerpts</code> to grab the first paragraph of a post for an overview display</li>\n<li><code>metalsmith-tags</code> to allow tagging of posts and listing posts by tag`</li>\n<li><code>metalsmith-sass</code> for SCSS compilation</li>\n<li><code>metalsmith-icons</code> for easy inclusion of custom icon fonts from font-awesome</li>\n<li><code>metalsmith-feed</code> to generate an RSS feed</li>\n</ul>\n<p>Good luck!</p>\n',excerpt:"Ever want to set up your own blog?  Stuck on which Static Site Generator to use?  Know Javascript?  Or don&apos;t?  After trying out multiple NodeJS based SSG&apos;s, and looking into multiple non-NodeJS based ones, I settled on Metalsmith for my own blog.  Here&apos;s my beginner&apos;s guide to setting up a new blog from scratch.",permalink:"/post/building-a-blog-with-metalsmith",readingTime:{text:"8 min read",minutes:7.5,time:45e4,words:1500},slug:"building-a-blog-with-metalsmith"}}}]);